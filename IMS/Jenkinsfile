pipeline {
    agent any
    options {
        timeout(time: 10, unit: "MINUTES")
    }
    stages {
        stage('Checkout IMS') {
            steps {
                dir("IMS") {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'CalibrationResults']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: 'https://github.com/mhy20401/Inventory-Management-System-MERN-CRUD-App.git']]
                    ])
                }
                dir("IMS/CalibrationResults") {
                    bat "dir /p"
                }
            }
        }
        stage('Create Mongo Database') {
            steps {
                dir("IMS") {
                    bat "mongosh --host localhost --port 27017 -f buildmongo.js"
                }
            }
        }
        stage('Build Services') {
            parallel {
                stage('Backend') {
                    steps {
                        dir("IMS/CalibrationResults/Backend") {
                            bat "npm install"
                        }
                    }
                }
                stage('Frontend') {
                    steps {
                        dir("IMS/CalibrationResults/Frontend/inventory_management_system") {
                            bat "npm install"
                        }
                    }
                }
            }
        }
        stage('Run Unit Tests and Linting') {
            steps {
                dir("IMS") {
                    bat "echo 'Running unit tests and linting"
                }
            }
        }
        stage('Run Services') {
            parallel {
                stage('Backend') {
                    steps {
                        dir("IMS/CalibrationResults/Backend") {
                            bat "npm run server"
                        }
                    }
                }
                stage('Frontend') {
                    steps {
                        dir("IMS/CalibrationResults/Frontend/inventory_management_system") {
                            bat "npm start"
                        }
                    }
                }
            }
        }
        stage('Run QA tests') {
            steps {
                dir("IMS") {
                    bat "echo 'Running QA tests with Selenium'"
                }
            }
        }
        stage('Build packages') {
            parallel {
                stage('Backend package') {
                    steps {
                        dir("IMS/CalibrationResults/Backend") {
                            bat "npm build"
                        }
                    }
                }
                stage('Frontend package') {
                    steps {
                        dir("IMS/CalibrationResults/Frontend/inventory_management_system") {
                            bat "npm build"
                        }
                    }
                }
            }
        }
        stage('Publish packages') {
            parallel {
                stage('Backend publish') {
                    steps {
                        dir("IMS/CalibrationResults/Backend") {
                            bat "echo 'Command to publish to software repository for backend'"
                        }
                    }
                }
                stage('Frontend package') {
                    steps {
                        dir("IMS/CalibrationResults/Frontend/inventory_management_system") {
                            bat "echo 'Command to publish to software repository for frontend"
                        }
                    }
                }
            }
        }
    }
}